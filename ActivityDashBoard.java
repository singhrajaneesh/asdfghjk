package com.ekant.justbiz;import android.annotation.SuppressLint;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.LayerDrawable;import android.os.Bundle;import android.os.Handler;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBar;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.view.Gravity;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.Button;import android.widget.GridView;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.firebase.client.ChildEventListener;import com.firebase.client.DataSnapshot;import com.firebase.client.Firebase;import com.firebase.client.FirebaseError;import com.firebase.client.Query;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;public class ActivityDashBoard extends AppCompatActivity implements ModAsyncResponce,ModProfileResponce{    final String imageurl = "http://www.justbusinesses.net/bridge/uploads/company-logos/";    public TextView listtext, listemailid;    public ModImageLoader imageLoader;    String[] osArray;    private ListView mDrawerList;    private DrawerLayout mDrawerLayout;    private AdapterNavigation mAdapter;    private ActionBarDrawerToggle mDrawerToggle;    LayerDrawable icon1, icon2;    LayoutInflater layoutInflater;    RelativeLayout guidelayout;    Context context;    String  message, name, uid, s;    ArrayList<HashMap<String, String>> getbussinesses, givebussinesses;    AdapterSaveTags adapter;    AdapterSaveGiveTags giveAdapter;    ListView getbussinesslist, givebussinesslist, livemessages;    Moddb db;    ImageView listimage;    ModTagLayout tagLayout;    Bundle bundle;    ArrayList<HashMap<String, String>> livemessageslist;    MenuItem item, item2;    ImageView editimage;    AdapterLiveMessage livemessageadapter;    //FrameLayout switcher;    boolean doubleBackToExitPressedOnce = false;    Boolean isInternetPresent = false;    ModConnectionDetector connectionDetector;    GridView gv;    AdapterDashboardnews adapternews;    String a;    ProgressBar progressBar;    HashMap<String, String> getverticals;    HashMap<String, String> giveverticals;    ArrayList<HashMap<String, String>> dataList;    String shraredUID;    String MyPREFERENCES = "MyPREFERENCES";    SharedPreferences sharedpreferences;    SharedPreferences.Editor editor;    TextView newsandevent,give,get,Livemsg,getmessage,getmessagedesc,givemessage,givemessagedesc,livemessagestext;    Integer getbusinesssize,givebusinesssize;    Button getbutton,givebutton;    private static final int NOTIFY_ME_ID=1337;    public boolean hasRefreshed;    RelativeLayout relativelayoutlive;    TextView livetxt;    @SuppressLint("WrongViewCast")    @Override    protected void onCreate(Bundle savedInstanceState)    {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_dash_board);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setHomeButtonEnabled(true);        getSupportActionBar().setIcon(R.drawable.logo);        Typeface face = Typeface.createFromAsset(getAssets(), "normal_futura.ttf");        getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_HOME_AS_UP);        Firebase.setAndroidContext(this);        progressBar = (ProgressBar) findViewById(R.id.progressBarLogin);        progressBar.getIndeterminateDrawable().setColorFilter(Color.parseColor("#4db7ab"), android.graphics.PorterDuff.Mode.SRC_ATOP);        guidelayout = (RelativeLayout) findViewById(R.id.relativelayout);        // Set Left Navigation Drawer        mDrawerList = (ListView) findViewById(R.id.navList1);        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout12);        giveverticals=new HashMap<>();        int width = getResources().getDisplayMetrics().widthPixels/2+110;        DrawerLayout.LayoutParams params = (android.support.v4.widget.DrawerLayout.LayoutParams) mDrawerList.getLayoutParams();        params.width = width;        mDrawerList.setLayoutParams(params);//        livemessagestext=(TextView)findViewById(R.id.livemessagetextview);//        livemessagestext.setTypeface(face);        LayoutInflater inflater = getLayoutInflater();        ViewGroup header = (ViewGroup) inflater.inflate(R.layout.navigation_header, mDrawerList, false);        listtext = (TextView) header.findViewById(R.id.tv1);        listemailid = (TextView) header.findViewById(R.id.emailid);        listimage = (ImageView) header.findViewById(R.id.userlogo);        editimage = (ImageView) findViewById(R.id.addvertical);        connectionDetector = new ModConnectionDetector(getApplicationContext());        mDrawerList.addHeaderView(header, null, false);        newsandevent=(TextView) findViewById(R.id.textview123);        give=(TextView) findViewById(R.id.givebussiness);        get=(TextView) findViewById(R.id.wantbussiness);        Livemsg=(TextView) findViewById(R.id.livemessagestext);        Livemsg.setTypeface(face);        getmessage=(TextView) findViewById(R.id.get);        getmessage.setTypeface(face);        getmessagedesc=(TextView) findViewById(R.id.givebussiness);        getmessagedesc.setTypeface(face);        getbutton=(Button) findViewById(R.id.add);        getbutton.setTypeface(face);        givemessage=(TextView) findViewById(R.id.wantbussiness);        givemessage.setTypeface(face);        givemessagedesc=(TextView) findViewById(R.id.getbussiness);        givemessagedesc.setTypeface(face);        givebutton=(Button) findViewById(R.id.wantadd);        givebutton.setTypeface(face);        db = new Moddb(this);        //UID = db.getValue("UID");        addDrawerItems();        setupDrawer();        sharedpreferences = this.getSharedPreferences(MyPREFERENCES, Context.MODE_PRIVATE);        String strJson = sharedpreferences.getString("UserInfo", null);        shraredUID = sharedpreferences.getString("UID", null);        System.out.println("shraredUID  "+shraredUID);        System.out.println("strJson  "+strJson);        listtext = (TextView) header.findViewById(R.id.tv1);        int broadcatsize=db.getbroadcast(shraredUID).size();        System.out.println("getbroadcast size :" + broadcatsize);        if(broadcatsize==0)        {        }        else        {            NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);            android.app.Notification notification = new android.app.Notification            (R.drawable.logo, "Message from related recipient of Just Businesses! (Want business or money chat with us)", 10000);//System.currentTimeMillis()            Intent notificationIntent = new Intent(this,ActivityDashBoard.class);            notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);            PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);            notification.setLatestEventInfo(ActivityDashBoard.this, "Just Businesses", "Unread messages", pendingIntent);// another activity use pendingIntent            notificationManager.notify(10001, notification);//            final NotificationManager mgr=//                    (NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);//            Notification note=new Notification(R.drawable.logo,//                    "Just Businesses notification",//                    System.currentTimeMillis());////            note.setLatestEventInfo(this, "Just Businesses notification",//                    "Please read unviewd message", null);////            //After uncomment this line you will see number of notification arrived//            //note.number=2;//            mgr.notify(NOTIFY_ME_ID, note);        }        listemailid = (TextView) header.findViewById(R.id.emailid);        listimage = (ImageView) header.findViewById(R.id.userlogo);        if (strJson == null)        {            Toast.makeText(ActivityDashBoard.this, "Oops! Error Occured can't fetch data", Toast.LENGTH_SHORT).show();        }        else        {            try {                JSONObject jsonObject = new JSONObject(strJson);                listtext.setText(jsonObject.getString("CompanyName"));                listemailid.setText(jsonObject.getString("LoginEmail"));                String imageurl1 = imageurl + jsonObject.getString("CompanyLogo");                new ModIconLoader(this).DisplayImage(imageurl1, listimage);            } catch (JSONException e) {                e.printStackTrace();            }        }        newsandevent.setTypeface(face);        give.setTypeface(face);        get.setTypeface(face);        listtext.setTypeface(face);        listemailid.setTypeface(face);        listimage.setOnClickListener(new View.OnClickListener()        {            public void onClick(View v) {                Intent intent = new Intent(ActivityDashBoard.this, ActivityMyProfile.class);                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                startActivity(intent);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                finish();            }        });        layoutInflater = getLayoutInflater();        String helpvalue = db.getValue("dashboardhelp");        tagLayout = (ModTagLayout) findViewById(R.id.tagLayout);        getbussinesslist = (ListView) findViewById(R.id.dynamicget);        givebussinesslist = (ListView) findViewById(R.id.dynamicgive);        livemessages = (ListView) findViewById(R.id.livemessagelist);        if (helpvalue.equals("1"))        {            guidelayout.setVisibility(View.INVISIBLE);        }        getbussinesses = new ArrayList<HashMap<String, String>>();        givebussinesses = new ArrayList<HashMap<String, String>>();        livemessageslist = new Moddb(this).getbroadcast(shraredUID);        relativelayoutlive=(RelativeLayout) findViewById(R.id.livealert);        livetxt=(TextView) findViewById(R.id.tvlive);        livetxt.setTypeface(face);        if (livemessageslist.size()==0)        {            relativelayoutlive.setVisibility(View.VISIBLE);            livetxt.setVisibility(View.VISIBLE);        }        else        {            livemessages.setVisibility(View.VISIBLE);            livemessageadapter = new AdapterLiveMessage(this, livemessageslist, getApplicationContext());            livemessages.setAdapter(livemessageadapter);            ModHelper.getListViewSize(livemessages, 2);        }        imageLoader = new ModImageLoader(this);        //GetBusiness Dynamic        try {            JSONObject getBusiness = new JSONObject(strJson);            JSONArray value2 = getBusiness.getJSONArray("GetBusinesses");            for (int i = 0; i < value2.length(); i++)            {                HashMap<String, String> n = new HashMap<String, String>();                JSONObject c = value2.getJSONObject(i);                n.put("GetTitle", c.getString("GetTitle"));                n.put("Category", c.getString("Category"));                n.put("SubCategories", c.getString("SubCategories"));                n.put("Verticals", c.getString("Verticals"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                getbussinesses.add(n);            }            getbusinesssize = (Integer) getbussinesses.size();            adapter = new AdapterSaveTags(this, getbussinesses, getApplicationContext());            getbussinesslist.setAdapter(adapter);            ModHelper.getListViewSize(getbussinesslist, 1);        }        catch (Exception e)        {            e.printStackTrace();        }        //GiveBusiness Dynamic        try {            JSONObject getBusiness = new JSONObject(strJson);            JSONArray value2 = getBusiness.getJSONArray("GiveBusinesses");            for (int i = 0; i < value2.length(); i++)            {                HashMap<String, String> n = new HashMap<String, String>();                JSONObject c = value2.getJSONObject(i);                n.put("GetTitle", c.getString("GiveTitle"));                n.put("Category", c.getString("Category"));                n.put("SubCategories", c.getString("SubCategories"));                n.put("Verticals", c.getString("Verticals"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                givebussinesses.add(n);            }            givebusinesssize = (Integer) givebussinesses.size();            giveAdapter = new AdapterSaveGiveTags(this, givebussinesses, getApplicationContext());            givebussinesslist.setAdapter(giveAdapter);            ModHelper.getListViewSize(givebussinesslist, 4);        }        catch (Exception e)        {            e.printStackTrace();        }        gv = (GridView) findViewById(R.id.gridView1);        dataList = new ArrayList<HashMap<String, String>>();        gv.setOnItemClickListener(new AdapterView.OnItemClickListener()                                  {                                      @Override                                      public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                                          HashMap<String, String> hashMap = dataList.get(position);                                          String newsID=hashMap.get("NewsID");                                          Intent intent = new Intent(ActivityDashBoard.this, ActivityNewsReader.class);                                          intent.putExtra("position", newsID);                                          intent.putExtra("news", "1");                                          startActivity(intent);                                          overridePendingTransition(R.anim.right_in, R.anim.left_out);                                      }                                  }        );        if (strJson == null)        {            Toast.makeText(this,"News and Event section under progress",Toast.LENGTH_LONG).show();        }        else        {            try {                JSONObject jsonObject = new JSONObject(strJson);                JSONArray newsandevent=jsonObject.getJSONArray("Getnewsandevents");                for (int i = 0; i < newsandevent.length(); i++) {                    HashMap<String, String> n = new HashMap<String, String>();                    JSONObject c = newsandevent.getJSONObject(i);                    n.put("Heading", c.getString("Heading"));                    n.put("SubHeading", c.getString("SubHeading"));                    n.put("Image", c.getString("Image"));                    n.put("NewsID", c.getString("NewsID"));                      dataList.add(n);                }                adapternews = new AdapterDashboardnews(this, dataList, getApplicationContext());              gv.setAdapter(adapternews);            } catch (JSONException e) {                e.printStackTrace();            }        }        // Oncreate() method finish here...    }    @Override    protected void onStart() {        super.onStart();        sharedpreferences = this.getSharedPreferences(MyPREFERENCES, Context.MODE_PRIVATE);        String strJson = sharedpreferences.getString("UserInfo", null);        shraredUID = sharedpreferences.getString("UID", null);        if (strJson == null)        {        }        else        {            try {                JSONObject jsonObject = new JSONObject(strJson);                listtext.setText(jsonObject.getString("CompanyName"));                listemailid.setText(jsonObject.getString("LoginEmail"));                String imageurl1 = imageurl + jsonObject.getString("CompanyLogo");                new ModIconLoader(this).DisplayImage(imageurl1, listimage);            } catch (JSONException e) {                e.printStackTrace();            }        }        Firebase broadcastref = new Firebase(FireBaseUrl.FIREBASE_URL).child("BroadcastMessage");        Query broadcastquery = broadcastref.orderByChild("ToUID").equalTo(shraredUID);        broadcastquery.addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(DataSnapshot snapshot, String previousChild) {                Moddb db1 = new Moddb(getBaseContext());                HashMap<String, String> hashmap = (HashMap<String, String>) snapshot.getValue();                int value = db1.getFireCount(snapshot.getKey(), "firebaseBroadcastMessage");                if (value == 0) {                    db1.insertbroadcast(snapshot.getKey(), hashmap.get("FromName"), hashmap.get("FromUID"), hashmap.get("Message"), hashmap.get("ToName"), hashmap.get("ToUID"), hashmap.get("date"), hashmap.get("Like"),                            hashmap.get("FromLogo"), hashmap.get("FromCompany"), hashmap.get("FromIndustry"), hashmap.get("ToLogo"), hashmap.get("ToCompany"), hashmap.get("ToIndustry"));                }                ArrayList<HashMap<String, String>> newlist = db1.getbroadcast(shraredUID);                livemessageslist.clear();                livemessageslist.addAll(0, newlist);                ModHelper.getListViewSize(livemessages, 2);                livemessageadapter.notifyDataSetChanged();            }            @Override            public void onChildChanged(DataSnapshot dataSnapshot, String s)            {            }            @Override            public void onChildRemoved(DataSnapshot dataSnapshot) {            }            @Override            public void onChildMoved(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onCancelled(FirebaseError firebaseError)            {            }        }        );        // Friends Table        Firebase friendsref = new Firebase(FireBaseUrl.FIREBASE_URL).child("Friends");        Query firendsquery = friendsref.orderByChild("PersonID").equalTo(shraredUID);        firendsquery.addChildEventListener(new ChildEventListener()        {            @Override            public void onChildAdded(DataSnapshot snapshot, String previousChild) {                Moddb db1 = new Moddb(getBaseContext());                HashMap<String, String> hashmap = (HashMap<String, String>) snapshot.getValue();                int value = db1.getFireCount(snapshot.getKey(), "firebaseFriends");                if (value == 0) {                    db1.insertfirebaseFriends(snapshot.getKey(), hashmap.get("Date"), hashmap.get("FriendID"), hashmap.get("FriendName"), hashmap.get("PersonID"), hashmap.get("FriendLogo"), hashmap.get("FriendCompany"), hashmap.get("FriendIndustry"));                }                if (icon2 != null)                    ModBadgeUtill.setBadgeCount(getApplicationContext(), icon2, db1.getMessageCount(shraredUID));//set default hard coded value 1  db1.getMessageCount(shraredUID)            }            @Override            public void onChildChanged(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onChildRemoved(DataSnapshot dataSnapshot) {            }            @Override            public void onChildMoved(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onCancelled(FirebaseError firebaseError) {            }        });        // BroadcastMessage Table        Firebase messageref = new Firebase(FireBaseUrl.FIREBASE_URL).child("Messages");        Query messagequery = messageref.orderByChild("ToUID").equalTo(shraredUID);        messagequery.addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(DataSnapshot snapshot, String previousChild) {                Moddb db1 = new Moddb(getBaseContext());                HashMap<String, String> hashmap = (HashMap<String, String>) snapshot.getValue();                int value = db1.getFireCount(snapshot.getKey(), "firebaseMessages");                if (value == 0)                {                    db1.firebaseMessages(snapshot.getKey(), hashmap.get("Date"), hashmap.get("FromUID"), hashmap.get("Message"), hashmap.get("ToUID"), hashmap.get("Viewed"));                }                if (icon1 != null)                    ModBadgeUtill.setBadgeCount(getApplicationContext(), icon1, db1.getMessageCount(shraredUID));            }            @Override            public void onChildChanged(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onChildRemoved(DataSnapshot dataSnapshot) {            }            @Override            public void onChildMoved(DataSnapshot dataSnapshot, String s)            {            }            @Override            public void onCancelled(FirebaseError firebaseError) {            }        });        Firebase messageref2 = new Firebase(FireBaseUrl.FIREBASE_URL).child("Messages");        Query messagequery1 = messageref2.orderByChild("FromUID").equalTo(shraredUID);        messagequery1.addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(DataSnapshot snapshot, String previousChild) {                Moddb db1 = new Moddb(getBaseContext());                HashMap<String, String> hashmap = (HashMap<String, String>) snapshot.getValue();                int value = db1.getFireCount(snapshot.getKey(), "firebaseMessages");                if (value == 0) {                    db1.firebaseMessages(snapshot.getKey(), hashmap.get("Date"), hashmap.get("FromUID"), hashmap.get("Message"), hashmap.get("ToUID"), hashmap.get("Viewed"));                }            }            @Override            public void onChildChanged(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onChildRemoved(DataSnapshot dataSnapshot) {            }            @Override            public void onChildMoved(DataSnapshot dataSnapshot, String s) {            }            @Override            public void onCancelled(FirebaseError firebaseError) {            }        });    }    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onRestart()    {        super.onRestart();    }    @Override    protected void onStop()    {        super.onStop();    }    public void hide(View view) {        guidelayout.setVisibility(View.GONE);        int value = db.getCount("dashboardhelp");        if (value == 0) {            db.insertLogin("dashboardhelp", "1");        }    }    public void trashmsg23(View view) {      //  Toast.makeText(ActivityDashBoard.this, "Like comming soon", Toast.LENGTH_SHORT).show();        Moddb db = new Moddb(this);        ArrayList<HashMap<String,String>> allmessage=db.getbroadcast(shraredUID);        HashMap<String, String> verticals = livemessageslist.get((Integer) view.getTag());        db.deleteMsg(verticals.get("Key"));        ArrayList<HashMap<String, String>> newlist = db.getbroadcast(shraredUID);        livemessageslist.clear();        livemessageslist.addAll(0, newlist);        ModHelper.getListViewSize(livemessages, 2);        livemessageadapter.notifyDataSetChanged();    }    public void likemsg(View view)    {        Toast.makeText(ActivityDashBoard.this, "Friend liked", Toast.LENGTH_SHORT).show();        HashMap<String, String> verticals = livemessageslist.get((Integer) view.getTag());        Firebase friendsref = new Firebase(FireBaseUrl.FIREBASE_URL).child("Friends");        HashMap<String, String> friendhashmap = new HashMap<>();        friendhashmap.put("Date", verticals.get("Date"));        friendhashmap.put("FriendCompany", verticals.get("FromCompany"));        friendhashmap.put("FriendID", verticals.get("FromUID"));        friendhashmap.put("FriendIndustry", verticals.get("FromIndustry"));        friendhashmap.put("FriendLogo", verticals.get("FromLogo"));        friendhashmap.put("FriendName", verticals.get("FromName"));        friendhashmap.put("PersonID", verticals.get("ToUID"));        friendsref.push().setValue(friendhashmap);        HashMap<String, String> friendhashmap2 = new HashMap<>();        friendhashmap2.put("Date", verticals.get("Date"));        friendhashmap2.put("FriendCompany", verticals.get("ToCompany"));        friendhashmap2.put("FriendID", verticals.get("ToUID"));        friendhashmap2.put("FriendIndustry", verticals.get("ToIndustry"));        friendhashmap2.put("FriendLogo", verticals.get("ToLogo"));        friendhashmap2.put("FriendName", verticals.get("ToName"));        friendhashmap2.put("PersonID", verticals.get("FromUID"));        friendsref.push().setValue(friendhashmap2);        Firebase messageref = new Firebase(FireBaseUrl.FIREBASE_URL).child("Messages");        HashMap<String, String> hashmessage = new HashMap<String, String>();        hashmessage.put("Date", verticals.get("Date"));        hashmessage.put("FromUID", verticals.get("ToUID"));        hashmessage.put("Message", verticals.get("Message"));        hashmessage.put("ToUID", verticals.get("FromUID"));        hashmessage.put("Viewed", "0");        messageref.push().setValue(hashmessage);        HashMap<String, String> revhashmessage = new HashMap<String, String>();        revhashmessage.put("Date", verticals.get("Date"));        revhashmessage.put("FromUID", verticals.get("FromUID"));        revhashmessage.put("Message", "Ok i am interseted in your business...");        revhashmessage.put("ToUID", verticals.get("ToUID"));        revhashmessage.put("Viewed", "0");        messageref.push().setValue(revhashmessage);        Moddb db = new Moddb(this);        ArrayList<HashMap<String,String>> allmessage=db.getbroadcast(shraredUID);        HashMap<String, String> verticalss = livemessageslist.get((Integer) view.getTag());        db.deleteMsg(verticalss.get("Key"));        ArrayList<HashMap<String, String>> newlist = db.getbroadcast(shraredUID);        livemessageslist.clear();        livemessageslist.addAll(0, newlist);        ModHelper.getListViewSize(livemessages, 2);        livemessageadapter.notifyDataSetChanged();    }    // Most important    public void deleteclick(View view)    {        getverticals = getbussinesses.get((Integer) view.getTag());        System.out.println("giveverticalsgiveverticals  "+getverticals);        deletefromserver(shraredUID, "Get", getverticals.get("VerticalIDs"));    }    public void givedeleteclick(View view)    {        Toast.makeText(ActivityDashBoard.this, "Feature comming soon", Toast.LENGTH_SHORT).show();        giveverticals=givebussinesses.get((Integer) view.getTag());        deletefromserver(shraredUID, "Give", giveverticals.get("VerticalIDs"));        System.out.println("giveverticals"+giveverticals);    }    public void deletefromserver(String uid, String btype, String verticals)    {        isInternetPresent = connectionDetector.isConnectingToInternet();        if (isInternetPresent)        {            JSONObject obj = new JSONObject();            try {                obj.put("UID", uid);                obj.put("BType", btype);                obj.put("Verticals", verticals);            }            catch (JSONException e)            {                e.printStackTrace();            }            ModAsyncTask task = new ModAsyncTask();            task.delegate = this;            task.execute(obj.toString(), "deletemembervertical.php");        }        else        {            Toast.makeText(this, "Oops! Don't have internet connection.", Toast.LENGTH_SHORT).show();        }    }    public void CallChooseActivityGet(View view) {        if (getbusinesssize>=3)        {            Toast.makeText(ActivityDashBoard.this, "Can't select more than 3 get Businesses", Toast.LENGTH_SHORT).show();        }        else        {            Intent i5 = new Intent(ActivityDashBoard.this, ActivityChooseCategory.class);            i5.putExtra("industry", "Get");            startActivity(i5);            overridePendingTransition(R.anim.right_in, R.anim.left_out);        }    }    public void CallChooseActivityGive(View view) {        if (givebusinesssize>=2)        {            Toast.makeText(ActivityDashBoard.this, "Can't select more than 2 give Businesses", Toast.LENGTH_SHORT).show();        }        else        {            Intent i5 = new Intent(ActivityDashBoard.this, ActivityChooseCategory.class);            i5.putExtra("industry", "Give");            startActivity(i5);            overridePendingTransition(R.anim.right_in, R.anim.left_out);        }    }    // Function used to create menu option    @Override    public boolean onCreateOptionsMenu(Menu menu)    {        getMenuInflater().inflate(R.menu.menu_dash_board, menu);        item = menu.findItem(R.id.action_notificationsdashboard);        item2 = menu.findItem(R.id.menu_bookmark);     //   item3help=menu.findItem(R.id.action_help);        icon1 = (LayerDrawable) item.getIcon();        icon2 = (LayerDrawable) item2.getIcon();        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int value = db.getFriendCount();        switch (item.getItemId()) {            case R.id.action_notificationsdashboard:                if (value > 0) {                    Intent intent = new Intent(this, ActivityContact.class);                    startActivity(intent);                    overridePendingTransition(R.anim.right_in, R.anim.left_out);                }                else                {                    Toast.makeText(ActivityDashBoard.this, "Please make friend first.", Toast.LENGTH_LONG).show();                }                break;            case R.id.menu_bookmark:                //ModBadgeUtill.setBadgeCount(context, icon2, 0);                if (value > 0) {                    Intent intent = new Intent(this, ActivityContact.class);                    startActivity(intent);                    overridePendingTransition(R.anim.right_in, R.anim.left_out);                }                else                {                    Toast.makeText(ActivityDashBoard.this, "Please make friend first.", Toast.LENGTH_LONG).show();                }                return true;        }        if (mDrawerToggle.onOptionsItemSelected(item)) {            return true;        }        return super.onOptionsItemSelected(item);    }    // Function to send message to saved verticals.    public void sendClick(View view)    {        Intent sendMsg = new Intent(ActivityDashBoard.this, ActivitySendMessage.class);        sendMsg.putExtra("CategoryName", getbussinesses.get((Integer) view.getTag()).get("GetTitle"));        sendMsg.putExtra("Category", getbussinesses.get((Integer) view.getTag()).get("Category"));        sendMsg.putExtra("SubCategory", getbussinesses.get((Integer) view.getTag()).get("SubCategory"));        sendMsg.putExtra("Verticals", getbussinesses.get((Integer) view.getTag()).get("Verticals"));        sendMsg.putExtra("VerticalID", getbussinesses.get((Integer) view.getTag()).get("VerticalIDs"));        startActivity(sendMsg);        overridePendingTransition(R.anim.right_in, R.anim.left_out);    }    public void processFinish(String output)    {        progressBar.setVisibility(View.INVISIBLE);        System.out.println("Dashboardoutput"+output);        try        {            JSONObject jsonObj = new JSONObject(output);            String deletevalue = jsonObj.getString("DeleteCredential");            if (deletevalue.equals("1"))            {                getUserdetail(shraredUID);            }           }        catch(JSONException e1)        {            e1.printStackTrace();        }    }    public void getUserdetail(String uid)    {        if (isInternetPresent)        {            JSONObject obj = new JSONObject();            try {                obj.put("UID", uid);            } catch (JSONException e)            {                e.printStackTrace();            }            ModgetProfile task = new ModgetProfile();            task.delegate = this;            task.execute(obj.toString(), "member-profile.php");        }        else        {            Toast.makeText(ActivityDashBoard.this, "Oops! something happend wrong to server side", Toast.LENGTH_SHORT).show();        }    }    public void getProfile(String output)    {        sharedpreferences = getSharedPreferences(MyPREFERENCES, Context.MODE_PRIVATE);        editor = sharedpreferences.edit();        editor.putString("UserInfo", output);        editor.commit();        try {            String strJson = sharedpreferences.getString("UserInfo", null);            JSONObject getBusiness = new JSONObject(strJson);            JSONArray value2 = getBusiness.getJSONArray("GetBusinesses");            System.out.println("value2  "+value2);            getbussinesses.clear();            for (int i = 0; i < value2.length(); i++) {                HashMap<String, String> n = new HashMap<String, String>();                JSONObject c = value2.getJSONObject(i);                n.put("GetTitle", c.getString("GetTitle"));                n.put("Category", c.getString("Category"));                n.put("SubCategories", c.getString("SubCategories"));                n.put("Verticals", c.getString("Verticals"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                getbussinesses.add(n);            }            getbusinesssize = (Integer) getbussinesses.size();            adapter = new AdapterSaveTags(this, getbussinesses, getApplicationContext());            getbussinesslist.setAdapter(adapter);            adapter.notifyDataSetChanged();            ModHelper.getListViewSize(getbussinesslist, 1);        } catch (Exception e)        {           e.printStackTrace();            System.out.println("Exception occures  "+e.toString());        }        try {            String strJson = sharedpreferences.getString("UserInfo", null);            JSONObject getBusiness = new JSONObject(strJson);            JSONArray givevalue2 = getBusiness.getJSONArray("GiveBusinesses");            System.out.println("givevalue2 " + givevalue2);           // givebussinesses.clear();            for (int i = 0; i < givevalue2.length(); i++) {                HashMap<String, String> n = new HashMap<String, String>();                JSONObject c = givevalue2.getJSONObject(i);                n.put("GetTitle", c.getString("GetTitle"));                n.put("Category", c.getString("Category"));                n.put("SubCategories", c.getString("SubCategories"));                n.put("Verticals", c.getString("Verticals"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                n.put("VerticalIDs", c.getString("VerticalIDs"));                givebussinesses.add(n);            }           // givebusinesssize = (Integer) givebussinesses.size();            giveAdapter = new AdapterSaveGiveTags(this, givebussinesses, getApplicationContext());            givebussinesslist.setAdapter(giveAdapter);            giveAdapter.notifyDataSetChanged();           // ModHelper.getListViewSize(givebussinesslist, 4);        } catch (Exception e)        {            e.printStackTrace();            System.out.println("Exception occures  "+e.toString());        }}    private void addDrawerItems()    {        osArray = new String[]{"My Profile","My Connections","News and Events","See Guide","Share this App","Change Password","Help","Logout"};//, "Messages"        mAdapter = new AdapterNavigation(ActivityDashBoard.this, osArray, getApplicationContext());        mDrawerList.setAdapter(mAdapter);        mDrawerList.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                mDrawerList.setItemChecked(position, true);                mDrawerList.setSelection(position);                selectItem(position);            }        });    }    public void open() {        mDrawerLayout.closeDrawer(Gravity.LEFT);    }    private void selectItem(int position)    {        switch (position)        {            case 1:                Intent i = new Intent(ActivityDashBoard.this, ActivityMyProfile.class);                startActivity(i);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 2:                Intent i2 = new Intent(ActivityDashBoard.this, ActivityContact.class);                startActivity(i2);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 3:                Intent intent1=new Intent(ActivityDashBoard.this,ActivityNewsandEvent.class);                startActivity(intent1);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 4:                Moddb db1 = new Moddb(this);                db1.updateValue("Guide", "0");                Intent i8 = new Intent(ActivityDashBoard.this, ActivityGuide.class);                i8.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                startActivity(i8);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 5:                Intent intent = new Intent(Intent.ACTION_SEND);                intent.setType("text/plain");                intent.putExtra(Intent.EXTRA_TEXT, "https://play.google.com/store/apps?hl=en");                intent.putExtra(android.content.Intent.EXTRA_SUBJECT, "Check this app!");                startActivity(Intent.createChooser(intent, "Share"));                break;            case 6:                Intent i6 = new Intent(ActivityDashBoard.this, ActivityChangePassword.class);                startActivity(i6);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 7:                Intent i7 = new Intent(ActivityDashBoard.this, Help.class);                i7.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                startActivity(i7);                overridePendingTransition(R.anim.right_in, R.anim.left_out);                break;            case 8:                this.finish();                Moddb db = new Moddb(this);                db.updateValue("login", "0");                Intent i9 = new Intent(ActivityDashBoard.this, ActivityLogin.class);                i9.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                startActivity(i9);                overridePendingTransition(R.anim.left_in, R.anim.right_out);                break;            default:                Toast.makeText(ActivityDashBoard.this, "There is a problem to server side.", Toast.LENGTH_SHORT).show();        }        mDrawerLayout.closeDrawer(mDrawerList);    }    private void setupDrawer()    {        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.string.drawer_open, R.string.drawer_close) {            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                mAdapter = new AdapterNavigation(ActivityDashBoard.this, osArray, getApplicationContext());                mDrawerList.setAdapter(mAdapter);                //invalidateOptionsMenu();            }            public void onDrawerClosed(View view)            {                super.onDrawerClosed(view);                // invalidateOptionsMenu();            }        };        mDrawerToggle.setDrawerIndicatorEnabled(true);        mDrawerLayout.setDrawerListener(mDrawerToggle);    }    @Override    protected void onPostCreate(Bundle savedInstanceState)    {        super.onPostCreate(savedInstanceState);        // Sync the toggle state after onRestoreInstanceState has occurred.        mDrawerToggle.syncState();    }    @Override    public void onConfigurationChanged(Configuration newConfig)    {        super.onConfigurationChanged(newConfig);        mDrawerToggle.onConfigurationChanged(newConfig);    }    @Override    public void onBackPressed()    {//        // TODO Auto-generated method stub        if(mDrawerLayout.isDrawerOpen(Gravity.LEFT))        {            mDrawerLayout.closeDrawer(Gravity.LEFT);        }        else        {            if (doubleBackToExitPressedOnce)            {                super.onBackPressed();                return;            }            this.doubleBackToExitPressedOnce = true;            Toast.makeText(this, "click back again to exit", Toast.LENGTH_SHORT).show();            new Handler().postDelayed(new Runnable()            {                @Override                public void run() {                    doubleBackToExitPressedOnce = false;                }            }, 2000);        }      //      //  finish();        }}// with title and msg parameter////    // Notification Function//    private void Notification(String notificationTitle,//                              String notificationMessage) {//        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);//        android.app.Notification notification = new android.app.Notification(//                R.drawable.ic_launcher, "Message from Dipak Keshariya! (Android Developer)",//                System.currentTimeMillis());////        Intent notificationIntent = new Intent(this, AndroidNotifications.class);//        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,//                notificationIntent, 0);////        notification.setLatestEventInfo(AndroidNotifications.this,//                notificationTitle, notificationMessage, pendingIntent);//        notificationManager.notify(10001, notification);//    }